---
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";

import TextBlock from "../components/sectionBlocks/TextBlock.astro";
import ImageBlock from "../components/sectionBlocks/ImageBlock.astro";
import QuoteBlock from "../components/sectionBlocks/QuoteBlock.astro";

import { getAboutPage } from "../utils/sanity";
import { PortableText } from "astro-portabletext";
import { urlFor } from "../utils/image";
// import { getImage, Image } from "astro:assets";

const page: {
  title?: string;
  heroImage?: any;
  pageText?: any;
  content: any[];
} = await getAboutPage();

const imageUrl = urlFor(page.heroImage).url();
---

<Layout title={page.title ?? ""}>
  <div class="container stretch">
    <h1>{page.title}</h1>
    <section class="page__hero">
      {
        page.heroImage && (
          <Image
            src={imageUrl}
            widths={[240, 540, 720, 1080]}
            inferSize
            sizes="(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1080px) 720px, 1080px"
            alt="Image"
            class="page__cover"
          />
        )
      }

      <div class="page__content">
        <div class="page__text">
          <PortableText value={page.pageText} />
        </div>
      </div>
    </section>
    <section class="content">
      <div class="page__content">
        {
          page.content.map((block) => (
            <>
              {block._type === "textBlock" && (
                <TextBlock textItems={block.textItems} />
              )}
              {block._type === "quoteBlock" && (
                <QuoteBlock quote={block.quote} />
              )}
              {block._type === "imageBlock" && (
                <ImageBlock image={block.image} />
              )}

              {/* Uncomment and add other blocks as you implement them */}
              {/* {block._type === "imageBlock" && <ImageBlock image={block.image} />}
         
          {block._type === "textImageBlock" && <TextImageBlock {...block} />}
          {block._type === "videoBlock" && <VideoBlock videoUrl={block.videoUrl} />} */}
            </>
          ))
        }
      </div>
    </section>
  </div>
</Layout>

<style>
  .container {
    margin: 20vh 0 0 0;
  }
  .page__hero {
    width: 100%;

    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  }
  .page__cover,
  .page__cover--none {
    width: 100%;
    height: auto;
    object-fit: cover;
    order: 1;
  }

  .page__cover--none {
    background: var(--black);
  }

  .page__container {
    padding: 0 var(--space-3);
  }

  .page__text {
    & p {
      font-size: 1.5rem;
      line-height: 1.5;
    }
    p:first-child {
      font-size: 3rem;
      line-height: 100%;
    }

    p:last-child {
      font-size: 0.875rem;
    }
  }
  @media (min-width: 575px) {
    .page__container {
      width: 100%;
      margin: var(--space-1) 0 var(--space-4);
      display: grid;

      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));

      & .page__cover {
        order: 2;
      }
    }
  }
</style>
